define 'kryptnostic.mock.mock-data-utils', [
  'require'
  'forge'
  'kryptnostic.block-ciphertext'
], (require) ->

  # libraries
  forge = require 'forge'

  # kryptnostic
  BlockCiphertext = require 'kryptnostic.block-ciphertext'

  class MockDataUtils

    # 4096-bit RSA key pair, generated by forge.rsa.generateKeyPair(4096)
    @MOCK_RSA_KEY_PAIR_AS_PEM = {
      publicKey:
        '-----BEGIN PUBLIC KEY-----\r\n' +
        'MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgjRTK3V2opIr0+vkEU2T\r\n' +
        'AvQuu+9PYL/LE/Gz9Ak+l8qNYlLQZVvJVKXXBZpvmuOIjSZlGtQ7jJE/6zwgcumE\r\n' +
        '6RlmPiJ29W333xzB84HqK5sm6TRvn0rsUfSLKSThWneZQzS5tczRUcGWMU5O8Ctj\r\n' +
        '7FhjFqqaBLMu7Y0A+bbIDNb/qOi0wCKYvJZvluVDGOT9rDs3tG4ZrjkRPzSKOWur\r\n' +
        'Z7YSxoeHkCacbUSa0aZz8/2GhJIXl4q/OqcBIzHsLhpSko+Aq5d7d0UatZKLCeQ+\r\n' +
        'xcAnkUCwzKTjPtzEhcuYjtwDayEHgpKHZFMGgZYw1Eg5NPGMtTSlDtwYSQ0ifshN\r\n' +
        'OtZd98n50Y+16c2cGGxHqm2PDDpepH/XczAx9sLtRnnQRu8yNHAmwk7dg/SmaGtQ\r\n' +
        'mC0wQqv4RG9tJyu1WaM5rmlrJkNV7giyqA3mC15VpEwO6ghJwzWTrHLvEUXytZzJ\r\n' +
        'hH4KVkprpgrJjcPNya1CmgOh4ii/uonpsvuhisay45obBayvK4LAC+MJp7MSybOD\r\n' +
        'NLojagsUI02M5VFZfb/rIQpCVlOOWq4oTR4Wl5QS2xCliUGljtVzFTO5lk+5JY2U\r\n' +
        '7ZVZCwX9QUYRYnmNo1esS9npQWoq8AgdZ4wHAKknjekkl/+ma8V7U5ZbglYmgWnE\r\n' +
        'AwOvN88v6nCpT1OsxIQA+SECAwEAAQ==\r\n' +
        '-----END PUBLIC KEY-----\r\n'
      privateKey:
        '-----BEGIN RSA PRIVATE KEY-----\r\n' +
        'MIIJJwIBAAKCAgEAgjRTK3V2opIr0+vkEU2TAvQuu+9PYL/LE/Gz9Ak+l8qNYlLQ\r\n' +
        'ZVvJVKXXBZpvmuOIjSZlGtQ7jJE/6zwgcumE6RlmPiJ29W333xzB84HqK5sm6TRv\r\n' +
        'n0rsUfSLKSThWneZQzS5tczRUcGWMU5O8Ctj7FhjFqqaBLMu7Y0A+bbIDNb/qOi0\r\n' +
        'wCKYvJZvluVDGOT9rDs3tG4ZrjkRPzSKOWurZ7YSxoeHkCacbUSa0aZz8/2GhJIX\r\n' +
        'l4q/OqcBIzHsLhpSko+Aq5d7d0UatZKLCeQ+xcAnkUCwzKTjPtzEhcuYjtwDayEH\r\n' +
        'gpKHZFMGgZYw1Eg5NPGMtTSlDtwYSQ0ifshNOtZd98n50Y+16c2cGGxHqm2PDDpe\r\n' +
        'pH/XczAx9sLtRnnQRu8yNHAmwk7dg/SmaGtQmC0wQqv4RG9tJyu1WaM5rmlrJkNV\r\n' +
        '7giyqA3mC15VpEwO6ghJwzWTrHLvEUXytZzJhH4KVkprpgrJjcPNya1CmgOh4ii/\r\n' +
        'uonpsvuhisay45obBayvK4LAC+MJp7MSybODNLojagsUI02M5VFZfb/rIQpCVlOO\r\n' +
        'Wq4oTR4Wl5QS2xCliUGljtVzFTO5lk+5JY2U7ZVZCwX9QUYRYnmNo1esS9npQWoq\r\n' +
        '8AgdZ4wHAKknjekkl/+ma8V7U5ZbglYmgWnEAwOvN88v6nCpT1OsxIQA+SECAwEA\r\n' +
        'AQKCAgBZzeE3blMfGhZkmqS5Unn9ZZH+SbbEEkTtQp5NyTqE003k7R2Ta1VXrvK5\r\n' +
        'iKVFfX4nbL37XTqdX2loxBXVbD8hz0T3wimuaeS23EzhuU9cOC0EWAhNJA4PEM4S\r\n' +
        '2L8d+LOa6PjV7ajJ7O28oDhN6n+G+geOEKkeaMALVF/B3FHqmTfItohEpRgXquLY\r\n' +
        'ftRijT5x1n47Ul0gD3hX0dMse5jDdY9JoxzbTeZCbzkhNN9xAAIR2fmvqiDvQVTF\r\n' +
        'g59UxQ8CyzuCHn8n6l/bsHF5pxWsqzYfNzE6VNfv+bEKXzyf/BvXffaCFrKPfbxV\r\n' +
        'ENQo9o+OdrQIH4Fg2GlfqVGLhHfPCWU4seG0W/50TLffp0PO8L8sVAMP9IuHR1oZ\r\n' +
        'POZdna7KCDnsXVVAw1eI1ie47OTcNNcGRJaMA+9yOgGk2hMdUgvEyfaHi/Q6OVgA\r\n' +
        'uEoMdFhnVcqPB347Im5dloeewZJZEgQEKtkKqUzbUP0RtcFfmQlkaXTg15nr5JCv\r\n' +
        'NzhTgHd7tDts1XfqxRe71kKVJvZVEDxFWGmfCN5WZJ4Ur5HmnoiQZlqYVstPewIn\r\n' +
        'WtwYm4rJB3ZnrY13ImF/M7iSLkUjOQS6K0K4EihEmo2mMLhtUnLzDAhpnRyhXsVv\r\n' +
        'gnqn0IbiZ69j3/KMrlkGZfOahWWCfmpUo7e5/Gl9pA83TpSiaQKCAQEAzkgtHtmy\r\n' +
        '/95OR49dJRixRCpfKM9RyXTQxCVqasYvWNvy2gv0uyROlEhs3kATrcXYml4daZV/\r\n' +
        'rnin5fsqyiYh8eCCUvSKeu63Gf/ip5rcdwZyOhJsfnA3M+rml7ttHbMCsQlDRO/R\r\n' +
        'iuhils/xpm/jGBcdwyKV8lmURWzMcIZKDmK+UwvVPADQyN1TdnAvWrL53bJ8AE0a\r\n' +
        'PsG0yNCkM7chLqwbHR5D1IldsFO59SViKcC1+XbWY5Q1aYBkEuq64QtyuFCXrQ5u\r\n' +
        'z7Byi6QKwwKK3OenK7LelJKv3sd/9h5ih2uqJvsUrJJaSIx8RO2SzUNWWjmMhxBJ\r\n' +
        'ZT2Iu+KvQ/X32wKCAQEAoZYUetYkTmyw4SyGLqnqJn4whbLGzezy2YEzcear0S0w\r\n' +
        '9p+i4Oo5JH+0NIPPFEA44vxmaf3RzLRC3nL0UsMEg7kh+awgc0Xh/gYoQlGA/cVs\r\n' +
        '+dNROLYjYfZzH117TWPyFSaN2IUwW+hv4sOV4k9tfyBakIkdf6ioLxhZHqQPlEnr\r\n' +
        'YIedLYpSSGJabsbxa20s/mRHsN7B0edXWGdcKRbR+Es94W9WdzEYsOL8oNKEZpvD\r\n' +
        'bEArOIncldUxcA/dQKETqbA1AQfnWwt7h3V9ocDn5xZMt4jJ6cJ6LMX/RFkdAEuk\r\n' +
        'PaCduXeH80NKWhDdtLVHAM7rWLoNAxwoj+anMudxswKCAQBTnkJcDRdYTP8iVuUF\r\n' +
        'EptY7GwimNeoeCfgOuKGYcvzk0VASjRsX+1SgoFPHl5bxKVm/duiXy2gxdwZh9Ty\r\n' +
        'mL6N09pAUkyIRJgIfAeetVHFFeHb1HgSUN6vtvq+awVyUow2w3B3U1d3nXfJdoWY\r\n' +
        'WCaQL16rKSvrT5ChC9dbjbQbXL+V3mgTqKj5o24fxp4LgB11VtKZNKf85HyqIplN\r\n' +
        'NWDIEI/1H72TPBO0VFw/GWZPUoTxmNCTERMNrzPhzzDt5LweJt01E3Kr0fS80kRi\r\n' +
        'hHdR0L2dIybCxytvfSNL20lJZ8VTg9f/lFvwqLH/JuapOjCY5lcmsN1vop/4uY0e\r\n' +
        'WWidAoIBABHnC9vUL++UcUBxa2huIOgk4QFfHlGgaAObIfUDppOlWyBn7WbX7H7T\r\n' +
        'u0Z6OA45U1QqvLoPihgQ/LuiptkojC5/63i7DllXK8O2MO2wFAeJwRooxH3xCBiJ\r\n' +
        'cpXOCKQ5Z4/aVqrfjs0QAp1wKAIL5MjJ797FokQLjp6xJuaTLLq0OeTXAZ4TDizA\r\n' +
        '4N4XIpZRYUPKHntFIto7tFyyDu7qfVbyFygL6tuH0AGBFJZI3Kx1o4Ax19gKxiq/\r\n' +
        'lRuiVlQbxI7vW+ACXSqkKgqHBOVP9yGOQe+vsxc4GcsuIKsU6Hao6sh9LBxpVuGn\r\n' +
        '2ewCpF2qG/TF+CM7ccefbgsLdgjYxasCggEAbqP/eG0/LBqjtsQy0XOZEEo19NxM\r\n' +
        'PdbZor4ZXR5X2uDxn0dSyKlIH9uTXq21FASwFCUP1BkXCPSWqM1Nk6SipqrHDfX8\r\n' +
        'OzWcI5kxQR+rwimydbkK+o7h5ZVt2F/xB8r+1CycvnOY/NbzNDcapq2GU5YXVFSH\r\n' +
        'ArlBGyXNraKVvn0ELwPxoQ60zH5XIkuU0c63BvO8WlAe9uIulSELvvIo0Zs7IxCu\r\n' +
        'rWPbOrMzHZAcWKnP1tC/iUK+QZjg/2GreCoSjlFEeDOu0EonKlksTvhWmEnkw1LQ\r\n' +
        'qlUjHY1G3QuoZl1m/h9HEu2sGBNh3SYAjbrb8zcAn08p2LfPlOa1elL3jA==\r\n' +
        '-----END RSA PRIVATE KEY-----\r\n'
      signature:
        '62474fd1bb376060a50e3c2a3fee9d8e7953ef3fff9c65c81155c6239dc213b3' +
        '74375fb6c5ada98c264631ab7dd7f79c500945f2521199752df285fc1ea45b50' +
        '0fed2e6c189cb534697189e41f03e65c5ebe17661bae5870d919973a3da4e36b' +
        'd56460dc869ecc88c7f156cf88a31d03e316edabafc425b684bfdbbbc1a2d40f' +
        'cde8bbf99d85eac309d97ea0fca92528fec4b9a1d466d35867e37c0ea2941a22' +
        'e7efd7c5c7ca49e4b8e3d6f12b6b0384ccd5aca8f17fb58f41cf10cfa3230e30' +
        '3ab5320a253076f3449f73e2743f0b430a4222b98f12379ac4c4d969ce35b937' +
        '735e696b6926b53f885bb018fa9947609511ccc8bb9f6f9a63ed70a8c39cbdd7' +
        '8b68af58f6792d77f9aee76690546309ee79209a6862d13807cc03ae9bcc395b' +
        'a7418019bc44bc8e10527850255dc96d72aadd591a2483ee176f82fd4d848ccb' +
        'dea60f8fe3fac344dd8edb6ebeb6cbe9320ec309f13e69931fd019530a301cd5' +
        '9b5180ed635aed5a5ac22c5e0eb8c6dcc50172a4cf7c283c76066829121005c0' +
        '433e565cbb3aaab4f07fd3f8130fc6353ca93c699a21e92643c398eac0c2a3d5' +
        '09e509156aec4a46ad367da8e00ee14637e28c155a6ed6930fd05630a41e85d4' +
        'e325c18fc1ecc9ae24485bbe488b0916a1372cda000b041b15ba8a507713b5b7' +
        'c68fe8aa4bd1d30f5e5b5eb4f760c45f1682499099bf2fd2f36c566b625c793a'
    }

    @AES_CTR                     = 'AES-CTR'
    @AES_KEY_SIZE_IN_BYTES       = 16
    @INDEX_TOKEN_SIZE            = 16
    @FHE_PRIVATE_KEY_SIZE        = 329760
    @FHE_SEARCH_PRIVATE_KEY_SIZE = 4096
    @FHE_HASH_FUNCTION_SIZE      = 1060896
    @OBJECT_INDEX_PAIR_SIZE      = 2064
    @OBJECT_SEARCH_PAIR_SIZE     = 2080
    @OBJECT_SHARE_PAIR_SIZE      = 2064
    @PBKDF2_AES_ITERATIONS       = 128
    @PBKDF2_ITERATIONS           = 1000
    @RSA_KEY_SIZE                = 4096
    @RSA_EXPONENT_NUM            = 0x10001
    @SALT_SIZE_IN_BYTES          = 32

    #
    # generates a random 8-bit unsigned integer [0, 255]
    #
    @generateRandom8bitInteger: ->
      min = 0
      max = 255
      return Math.floor(Math.random() * (max - min + 1) + min)

    #
    # generates a Uint8Array filled with random 8-bit unsigned integers
    #
    @generateRandomUint8Array: (size) ->
      i = 0
      uint8 = new Uint8Array(size)
      while i < size
        uint8[i] = @generateRandom8bitInteger()
        i++
      return uint8

    #
    # generates a mock FHE private key represented as a Uint8Array
    #
    @generateMockFhePrivateKeyAsUint8: ->
      return @generateRandomUint8Array(@FHE_PRIVATE_KEY_SIZE)

    #
    # generates a mock search private key represented as a Uint8Array
    #
    @generateMockSearchPrivateKeyAsUint8: ->
      return @generateRandomUint8Array(@FHE_SEARCH_PRIVATE_KEY_SIZE)

    #
    # generates a mock client hash function represented as a Uint8Array
    #
    @generateMockClientHashFunctionAsUint8: ->
      return @generateRandomUint8Array(@FHE_HASH_FUNCTION_SIZE)

    #
    # generates a mock search token represented as a Uint8Array
    #
    @generateMockIndexTokenAsUint8: ->
      return @generateRandomUint8Array(@INDEX_TOKEN_SIZE)

    #
    # generates a mock BlockCipherText object out of the given data
    #
    # @param String plaintext - the plaintext data to encrypt
    # @param String key - the key with which to encrypt the plaintext data
    #
    @generateMockBlockCipherText: (plaintext, key) ->

      iv     = forge.random.getBytesSync(@AES_KEY_SIZE_IN_BYTES)
      salt   = '' # forge.random.getBytesSync(0)
      buffer = forge.util.createBuffer(plaintext)

      cipher = forge.cipher.createCipher(@AES_CTR, key)
      cipher.start({ iv })
      cipher.update(buffer)
      cipher.finish()
      ciphertext = cipher.output.data

      return new BlockCiphertext({
        iv       : btoa(iv),
        salt     : btoa(salt),
        contents : btoa(ciphertext)
      })

    #
    # generates a mock BlockCipherText object out of the given data, encrypted by a key derived from the given password
    # via PBKDF2
    #
    # @param String plaintext - the plaintext data to encrypt
    # @param String password - the password to use when deriving the key used for encryption
    #
    @generateMockBlockCipherTextEncryptedWithPassword: (plaintext, password) ->

      plaintextBuffer = forge.util.createBuffer(plaintext)

      md   = forge.sha1.create()
      iv   = forge.random.getBytesSync(@AES_KEY_SIZE_IN_BYTES)
      salt = forge.random.getBytesSync(@AES_KEY_SIZE_IN_BYTES)
      key  = forge.pkcs5.pbkdf2(password, salt, @PBKDF2_AES_ITERATIONS, @AES_KEY_SIZE_IN_BYTES, md)

      cipher = forge.cipher.createCipher(@AES_CTR, key)
      cipher.start({ iv })
      cipher.update(plaintextBuffer)
      cipher.finish()
      ciphertext = cipher.output.data

      return new BlockCiphertext({
        iv       : btoa(iv),
        salt     : btoa(salt),
        contents : btoa(ciphertext)
      })

    #
    # 1. generates a mock credential, which is a hex key derived from the given password via PBKDF2
    # 2. generates a mock salt, encrypted by a key genereated by the given password, represented as a BlockCipherText
    #
    # @param String password - the password to use for PBKDF2 key derivation
    #
    @generateMockCredentialPairFromPassword: (password) ->

      plaintextSalt       = forge.random.getBytesSync(@SALT_SIZE_IN_BYTES)
      plaintextSaltBuffer = forge.util.createBuffer(plaintextSalt)

      md   = forge.sha1.create()
      iv   = forge.random.getBytesSync(@AES_KEY_SIZE_IN_BYTES)
      salt = forge.random.getBytesSync(@AES_KEY_SIZE_IN_BYTES)
      key  = forge.pkcs5.pbkdf2(password, salt, @PBKDF2_AES_ITERATIONS, @AES_KEY_SIZE_IN_BYTES, md)

      cipher = forge.cipher.createCipher(@AES_CTR, key)
      cipher.start({ iv })
      cipher.update(plaintextSaltBuffer)
      cipher.finish()
      ciphertext = cipher.output.data

      encryptedSaltBlockCipherText = new BlockCiphertext({
        iv       : btoa(iv),
        salt     : btoa(salt),
        contents : btoa(ciphertext)
      })

      md            = forge.sha1.create()
      derivedKey    = forge.pkcs5.pbkdf2(password, plaintextSalt, @PBKDF2_ITERATIONS, @SALT_SIZE_IN_BYTES, md)
      derivedKeyHex = forge.util.bytesToHex(derivedKey)

      return {
        mockCredential    : derivedKeyHex,
        mockEncryptedSalt : encryptedSaltBlockCipherText
      }
