diff --git a/demo/demo.coffee b/demo/demo.coffee
index d71ca28..374c565 100644
--- a/demo/demo.coffee
+++ b/demo/demo.coffee
@@ -23,6 +23,7 @@ require [
   'kryptnostic.authentication-service'
   'kryptnostic.tree-loader'
   'kryptnostic.deletion-visitor'
+  'kryptnostic.crypto-key-storage-api'
 ], (require) ->
 
   Promise                 = require 'bluebird'
@@ -36,12 +37,14 @@ require [
   DeletionVisitor         = require 'kryptnostic.deletion-visitor'
   PermissionChangeVisitor = require 'kryptnostic.permission-change-visitor'
   UserDirectoryApi        = require 'kryptnostic.user-directory-api'
+  CryptoStorageApi        = require 'kryptnostic.crypto-key-storage-api'
 
   cryptoServiceLoader = new CryptoServiceLoader()
   storageClient       = new StorageClient()
-  sharingClient       = new SharingClient()
-  treeLoader          = new TreeLoader()
-  userDirectoryApi    = new UserDirectoryApi()
+  # sharingClient       = new SharingClient()
+  # treeLoader          = new TreeLoader()
+  # userDirectoryApi    = new UserDirectoryApi()
+  # cryptoStorageApi    = new CryptoStorageApi()
 
   # configure the client
   Config.set({
@@ -70,84 +73,84 @@ require [
   #
   # authenticate using a demo account
   #
-  setup()
-  .then ->
-    AuthenticationService.authenticate(USER1)
-  .then ->
+  # setup()
+  # .then ->
+  #   AuthenticationService.authenticate(USER1)
+  # .then ->
 
-    #
-    # example 1
-    # =========
-    # encrypt an object, upload it, download it, and decrypt it.
-    #
-    storageRequest = new StorageRequest({ body : 'test message' })
-    storageClient.uploadObject(storageRequest)
-    .then (objectId) ->
-      loadPromises = {
-        kryptnosticObject : storageClient.getObject(objectId),
-        cryptoService     : cryptoServiceLoader.getObjectCryptoService(objectId)
-      }
+    # #
+    # # example 1
+    # # =========
+    # # encrypt an object, upload it, download it, and decrypt it.
+    # #
+    # storageRequest = new StorageRequest({ body : 'test message' })
+    # storageClient.uploadObject(storageRequest)
+    # .then (objectId) ->
+    #   loadPromises = {
+    #     kryptnosticObject : storageClient.getObject(objectId),
+    #     cryptoService     : cryptoServiceLoader.getObjectCryptoService(objectId)
+    #   }
 
-      Promise.props(loadPromises)
-      .then (result)  ->
-        cryptoService     = result.cryptoService
-        kryptnosticObject = result.kryptnosticObject
-        decrypted         = kryptnosticObject.decrypt( cryptoService )
-        renderObject(decrypted)
-      .then ->
-        storageClient.deleteObject(objectId)
+    #   Promise.props(loadPromises)
+    #   .then (result)  ->
+    #     cryptoService     = result.cryptoService
+    #     kryptnosticObject = result.kryptnosticObject
+    #     decrypted         = kryptnosticObject.decrypt( cryptoService )
+    #     renderObject(decrypted)
+    #   .then ->
+    #     storageClient.deleteObject(objectId)
 
-    #
-    # example 2
-    # =========
-    # create an object and share it with another user
-    #
-    userDirectoryApi.resolve({ email: 'test@kryptnostic.com' })
-    .then (uuid) ->
-      storageRequest = new StorageRequest({
-        body         : 'this message will be shared'
-        isSearchable : true
-      })
-      shareUsers = [ uuid ]
+    # #
+    # # example 2
+    # # =========
+    # # create an object and share it with another user
+    # #
+    # userDirectoryApi.resolve({ email: 'test@kryptnostic.com' })
+    # .then (uuid) ->
+    #   storageRequest = new StorageRequest({
+    #     body         : 'this message will be shared'
+    #     isSearchable : true
+    #   })
+    #   shareUsers = [ uuid ]
 
-      storageClient.uploadObject(storageRequest)
-      .then (objectId) ->
-        sharingClient.shareObject(objectId, shareUsers)
+    #   storageClient.uploadObject(storageRequest)
+    #   .then (objectId) ->
+    #     sharingClient.shareObject(objectId, shareUsers)
 
-    #
-    # example 3
-    # =========
-    # change permissions on a whole tree of objects recursively
-    #
-    Promise.props({
-      uuid      : userDirectoryApi.resolve({ email : 'demo@kryptnostic.com' })
-      shareUuid : userDirectoryApi.resolve({ email : 'test@kryptnostic.com' })
-    })
-    .then ({ uuid, shareUuid }) ->
-      { tree } = {}
-      storageRequest = new StorageRequest({ body : 'this message will be shared' })
-      addVisitor     = new PermissionChangeVisitor([ uuid, shareUuid ])
-      removeVisitor  = new PermissionChangeVisitor([ uuid ])
+    # #
+    # # example 3
+    # # =========
+    # # change permissions on a whole tree of objects recursively
+    # #
+    # Promise.props({
+    #   uuid      : userDirectoryApi.resolve({ email : 'demo@kryptnostic.com' })
+    #   shareUuid : userDirectoryApi.resolve({ email : 'test@kryptnostic.com' })
+    # })
+    # .then ({ uuid, shareUuid }) ->
+    #   { tree } = {}
+    #   storageRequest = new StorageRequest({ body : 'this message will be shared' })
+    #   addVisitor     = new PermissionChangeVisitor([ uuid, shareUuid ])
+    #   removeVisitor  = new PermissionChangeVisitor([ uuid ])
 
-      storageClient.uploadObject(storageRequest)
-      .then (objectId) ->
-        treeLoader.load(objectId)
-      .then (_tree) ->
-        tree = _tree
-      .then ->
-        tree.visit(addVisitor)
-      .then ->
-        tree.visit(removeVisitor)
+    #   storageClient.uploadObject(storageRequest)
+    #   .then (objectId) ->
+    #     treeLoader.load(objectId)
+    #   .then (_tree) ->
+    #     tree = _tree
+    #   .then ->
+    #     tree.visit(addVisitor)
+    #   .then ->
+    #     tree.visit(removeVisitor)
 
-    #
-    # example 4
-    # =========
-    # delete an object and its children recursively
-    #
-    storageRequest = new StorageRequest({ body : 'this object and children will be deleted' })
-    storageClient.uploadObject(storageRequest)
-    .then (id) ->
-      treeLoader.load(id)
-    .then (tree) ->
-      tree.visit(new DeletionVisitor())
+    # #
+    # # example 4
+    # # =========
+    # # delete an object and its children recursively
+    # #
+    # storageRequest = new StorageRequest({ body : 'this object and children will be deleted' })
+    # storageClient.uploadObject(storageRequest)
+    # .then (id) ->
+    #   treeLoader.load(id)
+    # .then (tree) ->
+    #   tree.visit(new DeletionVisitor())
 
diff --git a/js/src/auth/SearchCredentialService.coffee b/js/src/auth/SearchCredentialService.coffee
index bb104f7..a5edac6 100644
--- a/js/src/auth/SearchCredentialService.coffee
+++ b/js/src/auth/SearchCredentialService.coffee
@@ -55,29 +55,27 @@ define 'kryptnostic.search-credential-service', [
   }
 
   encryptKey = ({ credentialType, uint8Key, cryptoServiceLoader }) ->
+    blockciphertext = new BlockCiphertext(uint8Key)
     if _.isEmpty(uint8Key)
       return uint8Key
     else if credentialType.encrypt
       cryptoServiceLoader.getObjectCryptoService(credentialType.id, { expectMiss : true })
       .then (cryptoService) ->
-        return cryptoService.encryptUint8Array(BlockCipertext(uint8Key))
+        return cryptoService.encryptUint8Array(blockciphertext)
     else
-      return BlockCipertext(uint8Key)
+      return blockciphertext
 
-      #seems that decryptKey should take in blockciphertext instead of uint8key
+  #seems that decryptKey should take in blockciphertext instead of uint8key
   decryptKey = ({ credentialType, blockCiphertext, cryptoServiceLoader }) ->
-  #decryptKey = ({ credentialType, uint8Key, cryptoServiceLoader }) ->
-    if _.isEmpty(uint8Key)
-      return uint8Key
+    if _.isEmpty(blockCiphertext)
+      return blockCiphertext
     else if credentialType.encrypt
       cryptoServiceLoader.getObjectCryptoService(credentialType.id, { expectMiss : true })
       .then (cryptoService) ->
-        #return cryptoService.decryptToUint8Array(uint8Key)
         return cryptoService.decryptToUint8Array(blockCiphertext)
     else
       uint8Key = new Uint8Array(_.map(blockCiphertext, (c) -> c.charCodeAt() ) )
       return uint8Key
-      #return uint8Key
 
   #
   # Loads or generates credentials produced by the SearchKeyGenerator, including
@@ -131,9 +129,7 @@ define 'kryptnostic.search-credential-service', [
       .then (credentialsByType) =>
         return _.mapValues(credentialsByType, (credential, typeKey) =>
           credentialType = CredentialType[typeKey]
-          #uint8Key       = credential
           blockCiphertext = credential
-          #return decryptKey({ credentialType, uint8Key, @cryptoServiceLoader }).data
           return decryptKey({ credentialType, blockCiphertext, @cryptoServiceLoader }).data
         )
 
diff --git a/js/src/crypto/RsaKeyGenerator.coffee b/js/src/crypto/RsaKeyGenerator.coffee
index 5a3c619..f9bd59c 100644
--- a/js/src/crypto/RsaKeyGenerator.coffee
+++ b/js/src/crypto/RsaKeyGenerator.coffee
@@ -20,6 +20,7 @@ define 'kryptnostic.rsa-key-generator', [
     generateKeypair: ->
       params = { bits: RSA_KEY_SIZE, e: EXPONENT }
       log.info('generating keypair', params)
-      return @generate(params)
+      return
+      # return @generate(params)
 
   return RsaKeyGenerator
diff --git a/js/src/search/MetadataMapper.coffee b/js/src/search/MetadataMapper.coffee
index a5203d5..cdbf810 100644
--- a/js/src/search/MetadataMapper.coffee
+++ b/js/src/search/MetadataMapper.coffee
@@ -3,7 +3,7 @@ define 'kryptnostic.search.metadata-mapper', [
   'kryptnostic.logger'
   'kryptnostic.binary-utils'
   'kryptnostic.hash-function'
-  'kryptnostic.kryptnostic-engine' #MOCK#
+  'kryptnostic.kryptnostic-engine'
   'kryptnostic.search.random-index-generator'
   'kryptnostic.search-credential-service' #added to load the keys stored
 ], (require) ->
@@ -11,7 +11,7 @@ define 'kryptnostic.search.metadata-mapper', [
   Logger                = require 'kryptnostic.logger'
   BinaryUtils           = require 'kryptnostic.binary-utils'
   HashFunction          = require 'kryptnostic.hash-function'
-  KryptnosticEngine     = require 'kryptnostic.kryptnostic-engine' #MOCK#
+  KryptnosticEngine     = require 'kryptnostic.kryptnostic-engine'
   RandomIndexGenerator  = require 'kryptnostic.search.random-index-generator'
   SearchCredentialService = require 'kryptnostic.search-credential-service'
 
@@ -38,7 +38,7 @@ define 'kryptnostic.search.metadata-mapper', [
 
     constructor: ->
       @service        = new SearchCredentialService()
-      #@engine         = new KryptnosticEngine() #MOCK#
+      @engine         = @newKryptnosticEngine()
       @indexGenerator = new RandomIndexGenerator()
       @hashFunction   = HashFunction.MURMUR3_128
 
@@ -47,7 +47,7 @@ define 'kryptnostic.search.metadata-mapper', [
       .then (credentials) ->
         fhePrivateKey = credentials.FHE_PRIVATE_KEY
         searchPrivateKey = credentials.SEARCH_PRIVATE_KEY
-        engine = new KryptnosticEngine(fhePrivateKey, searchPrivateKey)
+        engine = new KryptnosticEngine({ fhePrivateKey, searchPrivateKey })
         return engine
 
     mapToKeys: ({ metadata, objectAddressMatrix, objectSearchKey }) ->
diff --git a/js/src/search/SearchIndexingService.coffee b/js/src/search/SearchIndexingService.coffee
index 8b3b04d..efe4f37 100644
--- a/js/src/search/SearchIndexingService.coffee
+++ b/js/src/search/SearchIndexingService.coffee
@@ -11,8 +11,11 @@ define 'kryptnostic.search-indexing-service', [
   'kryptnostic.search.indexer'
   'kryptnostic.search.metadata-mapper'
   'kryptnostic.indexed-metadata'
-  'kryptnostic.search-credential-service' #added to load the keys stored
+  # 'kryptnostic.search-credential-service' #added to load the keys stored
   'kryptnostic.kryptnostic-engine-provider'
+  'kryptnostic.sharing-api'
+  'kryptnostic.search-key-serializer'
+  'kryptnostic.sharing-client'
 ], (require) ->
 
   # libraries
diff --git a/js/src/service/SharingClient.coffee b/js/src/service/SharingClient.coffee
index 6e8fd1a..d60000e 100644
--- a/js/src/service/SharingClient.coffee
+++ b/js/src/service/SharingClient.coffee
@@ -5,7 +5,7 @@ define 'kryptnostic.sharing-client', [
   'kryptnostic.crypto-service-loader'
   'kryptnostic.crypto-service-marshaller'
   'kryptnostic.directory-api'
-  'kryptnostic.kryptnostic-engine'
+  'kryptnostic.kryptnostic-engine-provider'
   'kryptnostic.logger'
   'kryptnostic.revocation-request'
   'kryptnostic.rsa-crypto-service'
@@ -26,7 +26,7 @@ define 'kryptnostic.sharing-client', [
   CredentialLoader        = require 'kryptnostic.credential-loader'
   CryptoServiceLoader     = require 'kryptnostic.crypto-service-loader'
   CryptoServiceMarshaller = require 'kryptnostic.crypto-service-marshaller'
-  KryptnosticEngine       = require 'kryptnostic.kryptnostic-engine'
+  KryptnosticEngineProvider       = require 'kryptnostic.kryptnostic-engine-provider'
   RevocationRequest       = require 'kryptnostic.revocation-request'
   RsaCryptoService        = require 'kryptnostic.rsa-crypto-service'
   SharingRequest          = require 'kryptnostic.sharing-request'
@@ -46,7 +46,7 @@ define 'kryptnostic.sharing-client', [
   class SharingClient
 
     constructor: ->
-      @engine                  = new KryptnosticEngine()
+      @engine                  = KryptnosticEngineProvider.getEngine()
       @sharingApi              = new SharingApi()
       @directoryApi            = new DirectoryApi()
       @cryptoServiceMarshaller = new CryptoServiceMarshaller()
diff --git a/js/src/util/requests.coffee b/js/src/util/requests.coffee
index 0946b6a..2ab0c76 100644
--- a/js/src/util/requests.coffee
+++ b/js/src/util/requests.coffee
@@ -34,9 +34,7 @@ define 'kryptnostic.requests', [
           url          : url
           method       : 'GET'
           responseType : 'arraybuffer'
-        })
-      )
-    )
+        })))
     .then (response) ->
       new Uint8Array(response)
 
@@ -61,9 +59,7 @@ define 'kryptnostic.requests', [
           url    : url
           method : 'POST'
           data   : data
-        })
-      )
-    )
+        })))
 
   return {
     wrapCredentials,
